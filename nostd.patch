diff --git a/FL_Flex.H b/FL_Flex.H
index 36b586f..bae39bd 100644
--- a/FL_Flex.H
+++ b/FL_Flex.H
@@ -1,44 +1,55 @@
 #include <FL/Fl_Group.H>
 #include <FL/fl_types.h>
-#include <vector>
 
-struct Fl_Flex : public Fl_Group
-{
-  static const uchar ROW = 0;
-  static const uchar COLUMN = 1;
+class WidgetVec {
+    Fl_Widget** buf;
+    size_t cap;
+    size_t len;
 
-  Fl_Flex(uchar direction);
-  Fl_Flex(int w, int h, uchar direction);
-  Fl_Flex(int x, int y, int w, int h, uchar direction);
-  Fl_Flex(int x, int y, int w, int h, const char *label = nullptr);
+public:
+    WidgetVec();
+    size_t size() const;
+    Fl_Widget* at(size_t idx);
+    Fl_Widget* operator[](size_t idx);
+    void reserve(size_t sz);
+    void push_back(Fl_Widget* w);
+    ~WidgetVec();
+};
 
-  virtual void end();
-  virtual void resize(int x, int y, int w, int h);
+struct Fl_Flex : public Fl_Group {
+    static const uchar ROW = 0;
+    static const uchar COLUMN = 1;
 
-  void setSize(Fl_Widget* w, int size);
+    Fl_Flex(uchar direction);
+    Fl_Flex(int w, int h, uchar direction);
+    Fl_Flex(int x, int y, int w, int h, uchar direction);
+    Fl_Flex(int x, int y, int w, int h, const char* label = nullptr);
 
-  void margin(int m) { _margin = m; }
+    virtual void end();
+    virtual void resize(int x, int y, int w, int h);
 
-  int margin() const { return _margin; }
+    void setSize(Fl_Widget* w, int size);
 
-  void pad(int p) { _pad = p; }
+    void margin(int m) { _margin = m; }
 
-  int pad() const { return _pad; }
+    int margin() const { return _margin; }
 
-  static void setDebug(bool val) { _debug = val; }
+    void pad(int p) { _pad = p; }
 
-private:
-  int _margin = 0;
-  int _pad = 5;
-  static bool _debug;
+    int pad() const { return _pad; }
 
-  std::vector<Fl_Widget*> setsized;
+    static void setDebug(bool val) { _debug = val; }
 
-  void debug();
-  void resizeRow(int x, int y, int w, int h);
-  void resizeCol(int x, int y, int w, int h);
+private:
+    int _margin = 0;
+    int _pad = 5;
+    static bool _debug;
 
-  bool isSetSize(Fl_Widget* w);
+    WidgetVec setsized;
 
-}; 
+    void debug();
+    void resizeRow(int x, int y, int w, int h);
+    void resizeCol(int x, int y, int w, int h);
 
+    bool isSetSize(Fl_Widget* w);
+};
diff --git a/FL_Flex.cpp b/FL_Flex.cpp
index 87b339e..e16c7fa 100644
--- a/FL_Flex.cpp
+++ b/FL_Flex.cpp
@@ -2,172 +2,209 @@
 
 #include <FL/Fl.H>
 
+WidgetVec::WidgetVec()
+    : buf(new Fl_Widget*[10])
+    , cap(10)
+    , len(0)
+{}
+
+size_t WidgetVec::size() const { return len; }
+
+Fl_Widget* WidgetVec::at(size_t idx) { return buf[idx]; }
+
+Fl_Widget* WidgetVec::operator[](size_t idx) { return at(idx); }
+
+void WidgetVec::reserve(size_t sz)
+{
+    if (buf == 0) {
+        len = 0;
+        cap = 0;
+    }
+    Fl_Widget** new_buf = new Fl_Widget*[sz];
+    memcpy(new_buf, buf, sz);
+    cap = sz;
+    delete[] buf;
+    buf = new_buf;
+}
+
+void WidgetVec::push_back(Fl_Widget* w)
+{
+    if (len >= cap) {
+        reserve(cap * 2);
+    }
+    buf[len++] = w;
+}
+
+WidgetVec::~WidgetVec()
+{
+    delete[] buf;
+}
+
 bool Fl_Flex::_debug = false;
 
-Fl_Flex::Fl_Flex(uchar direction) : Fl_Group(0, 0, 0, 0, 0) { type(direction); debug(); }
+Fl_Flex::Fl_Flex(uchar direction)
+    : Fl_Group(0, 0, 0, 0, 0)
+    , setsized(WidgetVec {})
+{
+    type(direction);
+    debug();
+}
 
-Fl_Flex::Fl_Flex(int w, int h, uchar direction) : Fl_Group(0, 0, w, h, 0) { type(direction); debug(); }
+Fl_Flex::Fl_Flex(int w, int h, uchar direction)
+    : Fl_Group(0, 0, w, h, 0)
+    , setsized(WidgetVec {})
+{
+    type(direction);
+    debug();
+}
 
-Fl_Flex::Fl_Flex(int x, int y, int w, int h, uchar direction) : Fl_Group(x, y, w, h, 0) { type(direction); debug(); }
+Fl_Flex::Fl_Flex(int x, int y, int w, int h, uchar direction)
+    : Fl_Group(x, y, w, h, 0)
+    , setsized(WidgetVec {})
+{
+    type(direction);
+    debug();
+}
 
-Fl_Flex::Fl_Flex(int x, int y, int w, int h, const char *label) : Fl_Group(x, y, w, h, label) { type(ROW); debug(); }
+Fl_Flex::Fl_Flex(int x, int y, int w, int h, const char* label)
+    : Fl_Group(x, y, w, h, label)
+    , setsized(WidgetVec {})
+{
+    type(ROW);
+    debug();
+}
 
 void Fl_Flex::debug()
 {
-  // Color the rows and columns to help facilitate development.
-  if (!_debug)
-    return;
-
-  if(type() == ROW)
-  {
-    color(fl_rgb_color(200, 0, 0));
-    box(FL_BORDER_BOX);
-  }
-  else
-  {
-    color(fl_rgb_color(0, 0, 200));
-    box(FL_BORDER_BOX);
-  }
+    // Color the rows and columns to help facilitate development.
+    if (!_debug)
+        return;
+
+    if (type() == ROW) {
+        color(fl_rgb_color(200, 0, 0));
+        box(FL_BORDER_BOX);
+    } else {
+        color(fl_rgb_color(0, 0, 200));
+        box(FL_BORDER_BOX);
+    }
 }
 
 void Fl_Flex::resizeRow(int x, int y, int w, int h)
 {
-  int cc = children();
-  int padW = w - _margin * 2;
-
-  // Calculate total width minus padding
-  for(int i = 1; i < cc; i++)
-  {
-    padW -= 5;
-  }
-
-  int cx = x + _margin;
-  int nrs = 0;
-
-  // Precalculate remaining size to resize to
-  // Calculate non-resizable width total
-  for(int i = 0; i < cc; i++)
-  {
-    Fl_Widget *c = child(i);
-
-    if(isSetSize(c))
-    {
-      nrs += c->w();
+    int cc = children();
+    int padW = w - _margin * 2;
+
+    // Calculate total width minus padding
+    for (int i = 1; i < cc; i++) {
+        padW -= 5;
     }
-  }
 
-  // Set children to shared width of remaining
-  for(int i = 0; i < cc; i++)
-  {
-    Fl_Widget *c = child(i);
+    int cx = x + _margin;
+    int nrs = 0;
 
-    if(isSetSize(c))
-    {
-      c->resize(cx, y + _margin, c->w(), h - _margin * 2);
-    }
-    else
-    {
-      c->resize(cx, y + _margin, (padW - nrs) / (cc - (int)setsized.size()), h - _margin * 2);
+    // Precalculate remaining size to resize to
+    // Calculate non-resizable width total
+    for (int i = 0; i < cc; i++) {
+        Fl_Widget* c = child(i);
+
+        if (isSetSize(c)) {
+            nrs += c->w();
+        }
     }
 
-    cx += c->w() + _pad;
-  }
+    // Set children to shared width of remaining
+    for (int i = 0; i < cc; i++) {
+        Fl_Widget* c = child(i);
+
+        if (isSetSize(c)) {
+            c->resize(cx, y + _margin, c->w(), h - _margin * 2);
+        } else {
+            c->resize(cx, y + _margin, (padW - nrs) / (cc - (int)setsized.size()), h - _margin * 2);
+        }
+
+        cx += c->w() + _pad;
+    }
 }
 
 void Fl_Flex::resizeCol(int x, int y, int w, int h)
 {
-  int cc = children();
-  int padH = h - _margin * 2;
-
-  // Calculate total height minus padding
-  for(int i = 1; i < cc; i++)
-  {
-    padH -= _pad;
-  }
-
-  int cy = y + _margin;
-  int nrs = 0;
-
-  // Precalculate remaining size to resize to
-  // Calculate non-resizable height total
-  for(int i = 0; i < cc; i++)
-  {
-    Fl_Widget *c = child(i);
-
-    if(isSetSize(c))
-    {
-      nrs += c->h();
+    int cc = children();
+    int padH = h - _margin * 2;
+
+    // Calculate total height minus padding
+    for (int i = 1; i < cc; i++) {
+        padH -= _pad;
     }
-  }
 
-  // Set children to shared width of remaining
-  for(int i = 0; i < cc; i++)
-  {
-    Fl_Widget *c = child(i);
+    int cy = y + _margin;
+    int nrs = 0;
 
-    if(isSetSize(c))
-    {
-      c->resize(x + _margin, cy, w - _margin * 2, c->h());
-    }
-    else
-    {
-      // [cc - (int)setsized.size()] allows negative.
-      // This is very handy to allow resizable items to have negative height
-      // allowing one on the top and bottom to center contents even if container
-      // is too small.
-      c->resize(x + _margin, cy, w - _margin * 2,
-        (padH - nrs) / (cc - (int)setsized.size()));
+    // Precalculate remaining size to resize to
+    // Calculate non-resizable height total
+    for (int i = 0; i < cc; i++) {
+        Fl_Widget* c = child(i);
+
+        if (isSetSize(c)) {
+            nrs += c->h();
+        }
     }
 
-    cy += c->h() + _pad;
-  }
+    // Set children to shared width of remaining
+    for (int i = 0; i < cc; i++) {
+        Fl_Widget* c = child(i);
+
+        if (isSetSize(c)) {
+            c->resize(x + _margin, cy, w - _margin * 2, c->h());
+        } else {
+            // [cc - (int)setsized.size()] allows negative.
+            // This is very handy to allow resizable items to have negative height
+            // allowing one on the top and bottom to center contents even if container
+            // is too small.
+            c->resize(x + _margin, cy, w - _margin * 2,
+                (padH - nrs) / (cc - (int)setsized.size()));
+        }
+
+        cy += c->h() + _pad;
+    }
 }
 
 void Fl_Flex::resize(int x, int y, int w, int h)
 {
-  Fl_Widget::resize(x, y, w, h);
-
-  if(type() == COLUMN)
-  {
-    resizeCol(x, y, w, h);
-  }
-  else
-  {
-    resizeRow(x, y, w, h);
-  }
+    Fl_Widget::resize(x, y, w, h);
+
+    if (type() == COLUMN) {
+        resizeCol(x, y, w, h);
+    } else {
+        resizeRow(x, y, w, h);
+    }
 }
 
 void Fl_Flex::end()
 {
-  Fl_Group::end();
-  resize(x(), y(), w(), h());
+    Fl_Group::end();
+    resize(x(), y(), w(), h());
 }
 
 void Fl_Flex::setSize(Fl_Widget* w, int size)
 {
-  w->resize(0, 0, size, size);
+    w->resize(0, 0, size, size);
 
-  for(size_t i = 0; i < setsized.size(); i++)
-  {
-    if(setsized.at(i) == w)
-    {
-      return;
+    for (size_t i = 0; i < setsized.size(); i++) {
+        if (setsized.at(i) == w) {
+            return;
+        }
     }
-  }
 
-  setsized.push_back(w);
+    setsized.push_back(w);
 }
 
 bool Fl_Flex::isSetSize(Fl_Widget* w)
 {
-  for(size_t i = 0; i < setsized.size(); i++)
-  {
-    if(w == setsized.at(i))
-    {
-      return true;
+    for (size_t i = 0; i < setsized.size(); i++) {
+        if (w == setsized.at(i)) {
+            return true;
+        }
     }
-  }
 
-  return false;
+    return false;
 }
-
